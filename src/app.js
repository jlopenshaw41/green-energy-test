const express = require("express");
const app = express();
const subscriberControllers = require("./controllers/subscribers");
//From Twilio marketing notifications tutorial
const bodyParser = require("body-parser");
// const session = require('express-session');
const morgan = require("morgan");
const message = require("./controllers/message");
const cors = require("cors");

app.use(cors());

//Add axios to make HTTP request to ReactiveEnergy API to get current energy mix

const axios = require("axios");

//Keep a record of when the last message was sent so we don't bombard subscribers
let timePreviousMessageSent = new Date();

// Formula to work out the difference between now and the time the last message was sent, in hours
const getDifferenceInHours = (date2, date1) => {
  let diff = (date2.getTime() - date1.getTime()) / 1000;
  diff /= 60 * 60;
  return Math.abs(Math.round(diff));
};

// Add cron to schedule our action every 30(?) mins 
const cron = require("node-cron");

cron.schedule("*/30 * * * *", () => {
  // Check the current time is between 8am and 9pm
  const currentHour = new Date().getHours();
  if (currentHour >= 8 && currentHour <= 21) {
    // If yes, get live energy data from reactive energy's API using axios
    axios.get("https://api.reactive.energy/energy-mix").then((res) => {
      const energyMix = res.data;

      // Work out the proportion of energy currently generated by non-fossil fuels
      const currentGreenEnergyProportion =
        energyMix.wind.proportion +
        energyMix.solar.proportion +
        energyMix.biomass.proportion +
        energyMix.hydro.proportion +
        energyMix.nuclear.proportion;

      // Check if it meets our threshold
      if (currentGreenEnergyProportion > 0.5) {
        // If yes, check that we haven't sent a message in the previous ten hours
          const currentTime = new Date();
        // Work out how long it's been since we last sent a message using our function from above
        const timeElapsedSincePreviousMessage = getDifferenceInHours(
          currentTime,
          timePreviousMessageSent
        );
        console.log(timeElapsedSincePreviousMessage);
        // If it's been longer than, say, 10 hours, send our messages
        if (timeElapsedSincePreviousMessage > 10) {
          // Replace this console.log with the Twilio message-sending logic
          console.log(
            `Status: Current green energy proportion is ${Math.floor(
              currentGreenEnergyProportion * 100
            )}%. Sending messages...`
          );
          // Record the time messages were last sent.
          timePreviousMessageSent = new Date();
        } else {
        // If it hasn't been 10 hrs since last message, console.log then exit out
          return console.log(
            "Status: It has not yet been 10 hours since the previous message was sent. No messages sent."
          );
        }
      } else {
        console.log(
          `Status: Current green energy proportion is only ${Math.floor(
            currentGreenEnergyProportion * 100
          )}%. No messages sent.`
        );
      }
    });
  } else {
    return console.log(
      "Status: 'Do not Disturb' is active! Messages are only sent between the hours of 8am and 9pm. No messages sent."
    );
  }
});

// Need to confirm whether incoming HTTP requests from Twilio are in JSON format
app.use(express.json());

// From Twilio marketing notifications tutorial - "Use morgan for HTTP request logging"
app.use(morgan("combined"));

// From Twilio marketing notifications tutorial - "Serve static assets"
// app.use(express.static(path.join(__dirname, 'public')));

// From Twilio marketing notifications tutorial - "Parse incoming form-encoded HTTP bodies"
app.use(
  bodyParser.urlencoded({
    extended: true,
  })
);

app.post("/add-subscriber", subscriberControllers.create);

// Handle incoming SMS from users to our Twilio number (will look at this again later)
// app.post("/incoming-message", message.webhook);

// Hit this endpoint to send messages to subscribers
app.post("/subscribers/send-message", message.sendMessages);

app.get("/subscribers", subscriberControllers.list);

app.patch("/subscribers/:id", subscriberControllers.update);

app.delete("/subscribers/:id", subscriberControllers.deleteSubscriber);

module.exports = app;
